package com.nineya.spring.proxy;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;interface JdkTargetInterface {    String test(String str);}class JdkTargetObject implements JdkTargetInterface {    @Override    public String test(String str) {        System.out.println("被代理函数执行：" + str);        return "被代理函数的返回结果";    }}class JdkProxyHandler implements InvocationHandler {    private Object target;    public JdkProxyHandler() {    }    public JdkProxyHandler(Object target) {        this.target = target;    }    @Override    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {        System.out.println("代理函数执行：" + method);        if (target == null) {            return "代理函数的返回结果";        }        return method.invoke(target, args);    }}public class JdkProxyMain {    private static void proxyInterface() {        // 创建代理类        JdkTargetInterface proxyTargetInterface = (JdkTargetInterface) Proxy.newProxyInstance(                JdkProxyMain.class.getClassLoader(), new Class[]{JdkTargetInterface.class}, new JdkProxyHandler());        String result = proxyTargetInterface.test("这是请求参数");        System.out.println("执行结果：" + result);    }    private static void proxyObject() {        // 被代理对象        JdkTargetObject targetObject = new JdkTargetObject();        // 创建代理类        JdkTargetInterface proxyTargetInterface = (JdkTargetInterface) Proxy.newProxyInstance(                JdkProxyMain.class.getClassLoader(), new Class[]{JdkTargetInterface.class}, new JdkProxyHandler(targetObject));        String result = proxyTargetInterface.test("这是请求参数");        System.out.println("执行结果：" + result);    }    public static void main(String[] args) {        System.out.println("## Jdk 代理接口");        proxyInterface();        System.out.println("## Jdk 代理对象");        proxyObject();    }}