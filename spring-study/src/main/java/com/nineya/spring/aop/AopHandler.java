package com.nineya.spring.aop;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.springframework.stereotype.Component;import java.util.Arrays;import java.util.stream.Collectors;@Aspect@Componentpublic class AopHandler {    @Pointcut("execution(* com.nineya.spring.aop.BeanObject.run(..))")    private void pointcut() {    }    @Before("pointcut()")    public void before(JoinPoint joinPoint) {        System.out.printf("before %s: %s\n", joinPoint.getSignature().getName(), Arrays.stream(joinPoint.getArgs())                .map(Object::toString)                .collect(Collectors.joining(",", "[", "]")));    }    @After("pointcut()")    public void after() {        System.out.println("after");    }}