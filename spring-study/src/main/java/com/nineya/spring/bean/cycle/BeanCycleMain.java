package com.nineya.spring.bean.cycle;import com.nineya.spring.bean.cycle.entity.OneBean;import com.nineya.spring.bean.cycle.entity.TwoBean;import org.springframework.beans.factory.support.DefaultListableBeanFactory;import org.springframework.context.annotation.AnnotationConfigApplicationContext;public class BeanCycleMain {        private static void run(AnnotationConfigApplicationContext context) {        System.out.println("## 扫描Bean注解");        context.scan(BeanCycleMain.class.getPackage().getName());        context.refresh();        System.out.println("## 通过class取得oneBean");        OneBean oneBean = context.getBean(OneBean.class);        System.out.println(oneBean + " : " + oneBean.hashCode());        System.out.println("getTwoBean : " + oneBean.getTwoBean());        System.out.println("## 通过class取得twoBean");        TwoBean twoBean = context.getBean(TwoBean.class);        System.out.println(twoBean + " : " + twoBean.hashCode());        System.out.println("getOneBean : " + twoBean.getOneBean());    }        public static void main(String[] args) {        System.out.println("## 创建容器");        run(new AnnotationConfigApplicationContext());        System.out.println("## 创建容器-关闭循环依赖");        try {            DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();            beanFactory.setAllowCircularReferences(false);            run(new AnnotationConfigApplicationContext(beanFactory));        } catch (Exception e) {            e.printStackTrace();        }                System.out.println("## 创建容器-不允许提前暴露");        try {            run(new AnnotationConfigApplicationContext(new DefaultListableBeanFactory(){                @Override                public Object getSingleton(String beanName) {                    return super.getSingleton(beanName, false);                }            }));        } catch (Exception e) {            e.printStackTrace();        }    }}