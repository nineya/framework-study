package com.nineya.spring;import com.nineya.spring.entity.BeanProcess;import com.nineya.spring.processor.NineyaBeanFactoryPostProcessor;import com.nineya.spring.processor.NineyaBeanPostProcessor;import org.springframework.beans.MutablePropertyValues;import org.springframework.beans.PropertyValue;import org.springframework.beans.factory.config.BeanDefinition;import org.springframework.beans.factory.support.DefaultListableBeanFactory;import org.springframework.beans.factory.support.GenericBeanDefinition;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;import java.util.ArrayList;import java.util.List;public class BeanLifecycleMain {    private static void javaApi() {        // 创建bean工厂        DefaultListableBeanFactory context = new DefaultListableBeanFactory();        //构造bean定义        GenericBeanDefinition gbd = new GenericBeanDefinition();        gbd.setBeanClass(BeanProcess.class);        // 设置属性        List<PropertyValue> propertyValues = new ArrayList<>();        propertyValues.add(new PropertyValue("name", "test"));        gbd.setPropertyValues(new MutablePropertyValues(propertyValues));        // 设置生命周期方法        gbd.setInitMethodName("init");        gbd.setDestroyMethodName("destroy");        //注册到环境上下文        context.registerBeanDefinition("test", gbd);        context.addBeanPostProcessor(new NineyaBeanPostProcessor());        new NineyaBeanFactoryPostProcessor().postProcessBeanFactory(context);        // 通过class取得bean        BeanProcess beanProcess = context.getBean(BeanProcess.class);        System.out.println(beanProcess + " : " + beanProcess.hashCode());                // 通过bean名称取得bean        beanProcess = (BeanProcess) context.getBean("test");        System.out.println(beanProcess + " : " + beanProcess.hashCode());                // 销毁bean        context.destroySingleton("test");        // 取得beanDefinition        BeanDefinition beanDefinition = context.getBeanDefinition("test");        System.out.println("beanDefinition : " + beanDefinition);        // 通过bean名称取得bean        beanProcess = (BeanProcess) context.getBean("test");        System.out.println(beanProcess + " : " + beanProcess.hashCode());    }    private static void xmlFile() {        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("spring.xml");        // 通过class取得bean        BeanProcess beanProcess = context.getBean(BeanProcess.class);        System.out.println(beanProcess + " : " + beanProcess.hashCode());        // 通过bean名称取得bean        beanProcess = (BeanProcess) context.getBean("test");        System.out.println(beanProcess + " : " + beanProcess.hashCode());        // 销毁bean        context.getBeanFactory().destroyBean("test", beanProcess);        // 取得beanDefinition        BeanDefinition beanDefinition = context.getBeanFactory().getBeanDefinition("test");        System.out.println("beanDefinition : " + beanDefinition);        // 通过bean名称取得bean        beanProcess = (BeanProcess) context.getBean("test");        System.out.println(beanProcess + " : " + beanProcess.hashCode());    }    private static void annotation() {        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();        // 配置注解扫描路径        context.scan(BeanLifecycleMain.class.getPackage().getName());        context.refresh();        // 通过class取得bean        BeanProcess beanProcess = context.getBean(BeanProcess.class);        System.out.println(beanProcess + " : " + beanProcess.hashCode());        // 通过bean名称取得bean        beanProcess = (BeanProcess) context.getBean("test");        System.out.println(beanProcess + " : " + beanProcess.hashCode());        // 销毁bean        context.getBeanFactory().destroyBean(beanProcess);        // 取得beanDefinition        BeanDefinition beanDefinition = context.getBeanFactory().getBeanDefinition("test");        System.out.println("beanDefinition : " + beanDefinition);        // 通过bean名称取得bean        beanProcess = (BeanProcess) context.getBean("test");        System.out.println(beanProcess + " : " + beanProcess.hashCode());    }    public static void main(String[] args) {        System.out.println("## javaApi");        javaApi();        System.out.println("## xmlFile");        xmlFile();        System.out.println("## annotation");        annotation();    }}