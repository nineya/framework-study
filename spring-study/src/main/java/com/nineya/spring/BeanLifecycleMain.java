package com.nineya.spring;import com.nineya.spring.entity.BeanProcess;import org.springframework.beans.BeansException;import org.springframework.beans.MutablePropertyValues;import org.springframework.beans.PropertyValue;import org.springframework.beans.factory.config.BeanFactoryPostProcessor;import org.springframework.beans.factory.config.BeanPostProcessor;import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;import org.springframework.beans.factory.support.DefaultListableBeanFactory;import org.springframework.beans.factory.support.GenericBeanDefinition;import java.util.ArrayList;import java.util.List;class NineyaBeanPostProcessor implements BeanPostProcessor {    @Override    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {        System.out.println("BeanPostProcessor.postProcessAfterInitialization(" + beanName + ") 后置处理器");        return bean;    }    @Override    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {        System.out.println("BeanPostProcessor.postProcessBeforeInitialization(" + beanName + ") 后置处理器");        return bean;    }}class NineyaBeanFactoryPostProcessor implements BeanFactoryPostProcessor {    @Override    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {        System.out.println("BeanFactoryPostProcessor.postProcessBeanFactory 后置处理器");    }}public class BeanLifecycleMain {    public static void main(String[] args) {        // 创建bean工厂        DefaultListableBeanFactory context = new DefaultListableBeanFactory();        //构造bean定义        GenericBeanDefinition gbd = new GenericBeanDefinition();        gbd.setBeanClass(BeanProcess.class);        // 设置属性        List<PropertyValue> propertyValues = new ArrayList<>();        propertyValues.add(new PropertyValue("name", "test"));        gbd.setPropertyValues(new MutablePropertyValues(propertyValues));        // 设置生命周期方法        gbd.setInitMethodName("init");        gbd.setDestroyMethodName("destroy");        //注册到环境上下文        context.registerBeanDefinition("test", gbd);        context.addBeanPostProcessor(new NineyaBeanPostProcessor());        new NineyaBeanFactoryPostProcessor().postProcessBeanFactory(context);        // 通过class取得bean        BeanProcess beanProcess = context.getBean(BeanProcess.class);        System.out.println(beanProcess + " : " + beanProcess.hashCode());        // 通过名称取得bean        beanProcess = (BeanProcess) context.getBean("test");        System.out.println(beanProcess + " : " + beanProcess.hashCode());    }}